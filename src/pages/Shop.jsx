import React, { useEffect, useState, useRef } from "react";
import useEcomStore from "../store/ecom-store";
import ProductCard from "../components/card/ProductCard";
import SearchCard from "../components/card/SearchCard";
import { useTranslation } from "react-i18next";
import { Loader } from "lucide-react";
import { useLocation, useNavigate } from "react-router-dom";

const Shop = () => {
  const getProduct = useEcomStore((state) => state.getProduct);
  const products = useEcomStore((state) => state.products);
  const loading = useEcomStore((state) => state.loading);
  const totalPages = useEcomStore((state) => state.totalPages);
  const currentPage = useEcomStore((state) => state.currentPage); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  const setPage = useEcomStore((state) => state.setPage); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const [itemsPerPage, setItemsPerPage] = useState(4); // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const { t } = useTranslation();

  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const productId = queryParams.get("productId"); // ‚úÖ ‡∏î‡∏∂‡∏á productId ‡∏à‡∏≤‡∏Å URL

  const navigate = useNavigate(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Hook ‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô useHistory

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á calculatePageForProduct ‡∏à‡∏≤‡∏Å store
  const calculatePageForProduct = useEcomStore((state) => state.calculatePageForProduct);

  // ‚úÖ ‡πÉ‡∏ä‡πâ useRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const productRefs = useRef({});

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  const handleItemsPerPageChange = (e) => {
    const newValue = parseInt(e.target.value, 10) || 1; // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å <input>
    setItemsPerPage(newValue);
    setPage(1); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    getProduct(newValue, 1); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ Backend
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Pagination
  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setPage(page); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      getProduct(itemsPerPage, page); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  // const scrollToProduct = (productId) => {
  //   const productElement = productRefs.current[productId];
  //   if (productElement) {
  //     productElement.scrollIntoView({ behavior: "smooth", block: "start" });
  //   }
  // };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
  const renderPageNumbers = () => {
    const pages = [];
    const maxPagesToShow = 3; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á 3 ‡∏ï‡∏±‡∏ß

    let startPage = Math.max(1, currentPage - 1);
    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ maxPagesToShow ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ startPage & endPage
    if (totalPages > maxPagesToShow && endPage === totalPages) {
      startPage = totalPages - maxPagesToShow + 1;
    }

    // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î" (<<)
    if (currentPage > 2) {
      pages.push(
        <button key="first" onClick={() => handlePageChange(1)} className="bttn shop-pagination-bnt">
          {"<<"}
        </button>
      );
    }

    // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö" (<)
    if (currentPage > 1) {
      pages.push(
        <button key="prev" onClick={() => handlePageChange(currentPage - 1)} className="bttn shop-pagination-bnt shop-pagination-bnt-previous">
          {"<"}
        </button>
      );
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á "..." ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏ñ‡πâ‡∏≤ currentPage > 2
    if (startPage > 1) {
      pages.push(<span key="dots-start">...</span>);
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
    for (let i = startPage; i <= endPage; i++) {
      pages.push(
        <button
          key={i}
          className={`bttn shop-pagination-bnt shop-pagination-bnt-number ${currentPage === i ? "active" : "shop-pagination-bnt-number-act"}`}
          onClick={() => handlePageChange(i)}
          disabled={currentPage === i}
        >
          {i}
        </button>
      );
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á "..." ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏ñ‡πâ‡∏≤ endPage < totalPages
    if (endPage < totalPages) {
      pages.push(<span key="dots-end">...</span>);
    }

    // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" (>)
    if (currentPage < totalPages) {
      pages.push(
        <button key="next" onClick={() => handlePageChange(currentPage + 1)} className="bttn shop-pagination-bnt shop-pagination-bnt-next">
          {">"}
        </button>
      );
    }

    // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢" (>>)
    if (currentPage < totalPages - 1) {
      pages.push(
        <button key="last" onClick={() => handlePageChange(totalPages)} className="bttn shop-pagination-bnt">
          {">>"}
        </button>
      );
    }

    return pages;
  };

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    getProduct(itemsPerPage, currentPage); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
    setTimeout(() => {
      window.scrollTo({ top: 0, behavior: "smooth" }); // ‚úÖ ‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    }, 100);
  }, [currentPage]);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
  useEffect(() => {
    let isMounted = true; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Component ‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å Mount ‡∏≠‡∏¢‡∏π‡πà
  
    const handleProductNavigation = async () => {
      if (!productId || !isMounted) return; 
  
      try {
        const targetPage = await calculatePageForProduct(productId, itemsPerPage);
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á isMounted ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
        if (isMounted && targetPage !== currentPage) {
          await getProduct(itemsPerPage, targetPage);
          setPage(targetPage);
        }

        // ‚úÖ ‡∏•‡∏ö productId ‡∏à‡∏≤‡∏Å URL ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
        // ‚úÖ ‡πÉ‡∏ä‡πâ navigate ‡πÅ‡∏ó‡∏ô history.replace
        setTimeout(() => {
        navigate("/shop", { replace: true });
      }, 200);
  
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isMounted ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏Å‡∏≠‡∏£‡πå
        // setTimeout(() => {
        //   if (isMounted) {
        //     const productElement = productRefs.current[productId];
        //     if (productElement) {
        //       productElement.scrollIntoView({ behavior: 'smooth', div: 'center' });
        //     }
        //   }
        // }, 500);

        const timer = setTimeout(() => {
          const productElement = document.getElementById(`product-${productId}`);
          if (productElement) {
            productElement.scrollIntoView({ behavior: "smooth", block: "center" });
          }
        }, 500);
        return () => clearTimeout(timer);

      } catch (error) {
        console.error("Error navigating to product:", error);
      }
    };
  
    handleProductNavigation();
  
    return () => {
      isMounted = false; // ‚úÖ Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component Unmount
    };
  }, [productId]); 

  console.log("üì¶ productId:", productId);
  // console.log("Total Pages:", totalPages);

  return (
    <div className="div-wrap">
      <div className="wrap-shop">
        <div className="search-card">
          <SearchCard />
        </div>

        <div className="scrollable-container">
          <p className="div-head">{t("sAllProd")}</p>
          <div className="div-content shop-product-cart">
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Loader ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° */}
            {loading && (
              // ‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏ï‡∏±‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏î‡∏¥‡πâ‡∏á
              <div className="loading-box">
                <br />
                <p className="loading-animate-pulse">{t("waitMassLoading")}</p>
                <br />
                <Loader className="loading-animate-icon loading-animate-spin" />
                <br />
              </div>
              // ‡∏à‡∏ö ‡∏ï‡∏±‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏î‡∏¥‡πâ‡∏á
            )}

            {/* // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏Å‡∏≤‡∏£ map ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö reference */}
            {products?.map((item) => (
              <div
                key={item.id}
                ref={(el) => (productRefs.current[item.id] = el)}
              >
                <ProductCard item={item} />
              </div>
            ))}
          </div>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Pagination */}
          {totalPages > 1 && (
            <div className="shop-pagination">
              <div>
                {/* <label>{t("sListProductPerPage")}</label> */}
                <input
                  type="number"
                  name="listProductPerPage"
                  value={itemsPerPage}
                  onChange={handleItemsPerPageChange}
                  min="1"
                  title={t("sListProductPerPage")}
                  className="form-input w-12 mb-0"
                />
              </div>
              {renderPageNumbers()}
            </div>
          )}

        </div>
      </div>
    </div>
  );
};

export default Shop;
